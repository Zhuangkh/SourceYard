<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- Project building properties -->
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <LangVersion>latest</LangVersion>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>

    <!-- NuGet package properties -->
    <Version>0.1.1-alpha</Version>
    <Authors>dotnet-campus</Authors>
    <Company>dotnet-campus</Company>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Description>Add a NuGet package only for dll reference? By using dotnetCampus.SourceYard, you can pack a NuGet package with source code. By installing the new source code package, all source codes behaviors just like it is in your project.</Description>
    <Copyright>Copyright (c) 2018 dotnet-campus</Copyright>
    <PackageLicenseUrl>https://github.com/dotnet-campus/dotnetCampus.SourceYard/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/dotnet-campus/dotnetCampus.SourceYard</PackageProjectUrl>
    <RepositoryUrl>https://github.com/dotnet-campus/dotnetCampus.SourceYard.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>source;dotnet;nuget;msbuild</PackageTags>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="*.DotSettings" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Properties\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="CommandLineParser" Version="2.2.1" />
  </ItemGroup>

  <ItemGroup>
    <!--所有的 NuGet 包资产都声明成私有的-->
    <PackageReference Update="@(PackageReference)" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <!--指定自己的在安装 nuget 时修改编译-->
    <None Include="Assets\Current\**" Pack="True" PackagePath="build\" />
  </ItemGroup>

</Project>
